#!/bin/bash
set -e

# build / deploy flags
build_containers=false
deploy_containers=false
clean_deploy=false

# core paths of fedn library and configurations
FEDN_PATH=modules/fedn
CONF_PATH=config/fedn_config

# secondary paths to hold container data
client_data_path="temp/data"
fedn_data_path="~/fedn_data"
fedn_build_path="build/containers"

# check requested user options
print_usage() {
    echo " "
    echo "Usage: $0 [OPTIONS]"
    echo ""
    echo "Options:"
    echo "  -h, --help          Display this help message"
    echo "  -b, --build         [Re]-Build FEDn containers"
    echo "  -d, --deploy        Deploy FEDn network components"
    echo "  -c, --clean         Perform a clean deployment"
    echo "  -o, --outpath       Specify output path default \$HOME/fedn_data"
    echo "  -p, --buildpath     Specify build path for FEDn containers"
    echo ""
}

no_args=true
while [ $# -gt 0 ]; do
    case $1 in
        # handle options
        -h | --help)
            # print script help information
            print_usage
            exit 0
            ;;
        -b | --build)
            # build the containers
            build_containers=true
            ;;
        -d | --deploy)
            # deploy fedn network
            deploy_containers=true
            ;;
        -c | --clean)
            # deploy fedn network
            clean_deploy=true
            ;;
        -o | --outpath)
            if [[ -z "$2" || "$2" == -* ]]; then
                echo "Output path not specified." >&2
                exit 1
            fi
            fedn_data_path=$2
            shift
            ;;
        -p | --buildpath)
            if [[ -z "$2" || "$2" == -* ]]; then
                echo "Output path not specified." >&2
                exit 1
            fi
            fedn_build_path=$2
            shift
            ;;
        *)
            # unidentified flag
            echo "Unidentified flag $1"
            print_usage
            exit 1
            ;;
    esac
    no_args=false
    shift
done
[[ "$no_args" = true ]] && {print_usage; exit 1;}

# secondary paths to hold container data
minio_data_path="$fedn_data_path/minio_data"
mongo_data_path="$fedn_data_path/mongo_data"
mexpr_data_path="$fedn_data_path/mexpr_data"
tm_overlay_path="$fedn_data_path/overalys"

# build containers if requested
if [ "$build_containers" = true ]; then
    # prepare build directory
    if test -d $fedn_build_path; then
        rm -rf $fedn_build_path
    fi
    mkdir -p $fedn_build_path

    # build containers
    apptainer build $fedn_build_path/fedn_minio.sif containers/fedn_minio.def
    apptainer build $fedn_build_path/fedn_mongo.sif containers/fedn_mongo.def
    apptainer build $fedn_build_path/fedn_mongo-express.sif containers/fedn_mongo-express.def
    apptainer build --build-arg FEDN_PATH=$FEDN_PATH --build-arg CONF_PATH=$CONF_PATH $fedn_build_path/fedn.sif containers/fedn.def
fi

# deploy containers if requested
if [ "$deploy_containers" = true ]; then
    # clean up if fresh deployment requested
    if [ "$clean_deploy" = true ]; then
        rm -rf "$minio_data_path" "$mongo_data_path" "$mexpr_data_path" "$tm_overlay_path"
        mkdir -p "$minio_data_path" "$mongo_data_path" "$mongo_data_path/db" "$mexpr_data_path" "$tm_overlay_path"
    fi

    # deploy common fedn services like mongodb, minio etc.
    apptainer instance start --bind $minio_data_path:/data $fedn_build_path/fedn_minio.sif minio
    apptainer instance start --bind $mongo_data_path:/data $fedn_build_path/fedn_mongo.sif mongo
    apptainer instance start --bind $mexpr_data_path:/data $fedn_build_path/fedn_mongo-express.sif mongo-express
    
    # deploy a reducer to act as dashboard
    apptainer overlay create --sparse --size 1024 $tm_overlay_path/dashboard_overlay.img
    apptainer instance start  --overlay $tm_overlay_path/dashboard_overlay.img $fedn_build_path/fedn.sif dashboard
    apptainer exec --pwd /app --overlay $tm_overlay_path/dashboard_overlay.img instance://dashboard fedn run dashboard -n reducer --init=/app/config/settings-reducer.yaml &
    
    # deploy the api server
    apptainer overlay create --sparse --size 1024 $tm_overlay_path/api_overlay.img
    apptainer instance start  --overlay $tm_overlay_path/api_overlay.img $fedn_build_path/fedn.sif api-server
    apptainer exec --pwd /app --overlay $tm_overlay_path/api_overlay.img instance://api-server python fedn/fedn/network/api/server.py &
    
    # deploy a combiner for model aggregations
    apptainer overlay create --sparse --size 1024 $tm_overlay_path/combiner_overlay.img
    apptainer instance start  --overlay $tm_overlay_path/combiner_overlay.img $fedn_build_path/fedn.sif combiner
    apptainer exec --pwd /app --overlay $tm_overlay_path/combiner_overlay.img instance://combiner fedn run combiner --init=/app/config/settings-combiner.yaml &

    # deploy some (2) clients
    apptainer overlay create --sparse --size 1024 $tm_overlay_path/client_overlay.img
    apptainer instance start  --overlay $tm_overlay_path/client_overlay.img $fedn_build_path/fedn.sif client
    apptainer exec --pwd /app --overlay $tm_overlay_path/client_overlay.img --bind $client_data_path:/var/data instance://client fedn run client --init=/app/config/settings-client.yaml &
    apptainer exec --pwd /app --overlay $tm_overlay_path/client_overlay.img --bind $client_data_path:/var/data instance://client fedn run client --init=/app/config/settings-client.yaml &
fi
