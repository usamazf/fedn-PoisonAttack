#!/bin/bash
set -e

# Build / deploy flags
build_containers=false
deploy_containers=false
clean_deploy=false
run_experiments=false
finish_deployment=false

# Core paths of fedn library and configurations
fedn_lib_path="modules/fedn"
fedn_configs="config/fedn_config"
exps_configs="exp_configs/*"

# Secondary paths to hold container data
client_data_path="temp/data"
fedn_data_path="temp/fedn_run_data"
fedn_build_path="build/containers"

# Other configurable variables
data_split_path="temp/"
comp_pack_path="src/compute_pytorch"
fedn_apiclient="src/api_client.py"
temp_compute="temp/temp_compute"
comp_out_path="temp/package.tgz"
seed_path=temp/seed.npz


# check requested user options
print_usage() {
    echo " "
    echo "Usage: $0 [OPTIONS]"
    echo ""
    echo "Options:"
    echo "  -h, --help          Display this help message"
    echo "  -b, --build         [Re]-Build FEDn containers"
    echo "  -d, --deploy        Deploy FEDn network components"
    echo "  -c, --clean         Perform a clean deployment"
    echo "  -e, --experiments   Run experiments at specified path"
    echo "  -o, --outpath       Specify output path default temp/fedn_data"
    echo "  -p, --buildpath     Specify build path for FEDn containers"
    echo "      --finish        Perform clean up and close the FEDn deployment"
    echo ""
}

no_args=true
while [ $# -gt 0 ]; do
    case $1 in
        # handle options
        -h | --help)
            # print script help information
            print_usage
            exit 0
            ;;
        -b | --build)
            # build the containers
            build_containers=true
            ;;
        -d | --deploy)
            # deploy fedn network
            deploy_containers=true
            ;;
        -c | --clean)
            # deploy fedn network
            clean_deploy=true
            ;;
        --finish)
            # deploy fedn network
            finish_deployment=true
            ;;
        -o | --outpath)
            if [[ -z "$2" || "$2" == -* ]]; then
                echo "Output path not specified." >&2
                exit 1
            fi
            fedn_data_path=$2
            shift
            ;;
        -p | --buildpath)
            if [[ -z "$2" || "$2" == -* ]]; then
                echo "Output path not specified." >&2
                exit 1
            fi
            fedn_build_path=$2
            shift
            ;;
        -e | --experiments)
            if [[ -z "$2" || "$2" == -* ]]; then
                echo "Output path not specified." >&2
                exit 1
            fi
            run_experiments=true
            exps_configs=$2
            shift
            ;;
        *)
            # unidentified flag
            echo "Unidentified flag $1"
            print_usage
            exit 1
            ;;
    esac
    no_args=false
    shift
done
[[ "$no_args" = true ]] && { print_usage; exit 1; }

# Secondary paths to hold container data
minio_data_path="${fedn_data_path}/minio_data"
mongo_data_path="${fedn_data_path}/mongo_data"
mexpr_data_path="${fedn_data_path}/mexpr_data"
tm_overlay_path="${fedn_data_path}/overalys"


#############################################################################################################################
##  Helper functions
#############################################################################################################################

# Clean up the build paths for fresh build
clean_build_paths() {
    echo "Cleaning up build path..."
    # prepare build directory
    if test -d ${fedn_build_path}; then
        rm -rf ${fedn_build_path}
    fi
    mkdir -p ${fedn_build_path}
}

# Build fedn containers using apptainer
create_containers() {
    clean_build_paths
    # Build containers
    echo "Buidling containers ..."
    apptainer build ${fedn_build_path}/fedn_minio.sif containers/fedn_minio.def
    apptainer build ${fedn_build_path}/fedn_mongo.sif containers/fedn_mongo.def
    apptainer build ${fedn_build_path}/fedn_mongo-express.sif containers/fedn_mongo-express.def
    apptainer build --build-arg FEDN_PATH=${fedn_lib_path} --build-arg CONF_PATH=${fedn_configs} ${fedn_build_path}/fedn.sif containers/fedn.def
}

# Clean up the output paths for fresh deployment
clean_depoly_paths() {
    echo "Cleaning up deployment paths..."
    rm -rf "${minio_data_path}" "${mongo_data_path}" "${mexpr_data_path}" "${tm_overlay_path}"
    mkdir -p "${minio_data_path}" && mkdir -p "${mongo_data_path}" && mkdir -p "${mongo_data_path}/db" && mkdir -p "${mexpr_data_path}" && mkdir -p "${tm_overlay_path}"
}

# Create new overlays for fresh deployment
create_overlays() {
    # create fresh overlays for a clean deployment
    apptainer overlay create --sparse --size 1024 ${tm_overlay_path}/dashboard_overlay.img
    apptainer overlay create --sparse --size 1024 ${tm_overlay_path}/api_overlay.img
    apptainer overlay create --sparse --size 1024 ${tm_overlay_path}/combiner_overlay.img
}

# Deploy the core FEDn network
deploy_fedn_network() {
    echo "Deploying FEDn network containers ..."
    # Deploy common fedn services like mongodb, mongo-express, minio etc.
    apptainer instance start --bind ${minio_data_path}:/data ${fedn_build_path}/fedn_minio.sif minio
    apptainer instance start --bind ${mongo_data_path}:/data ${fedn_build_path}/fedn_mongo.sif mongo
    apptainer instance start --bind ${mexpr_data_path}:/data ${fedn_build_path}/fedn_mongo-express.sif mongo-express
    
    # Deploy a reducer to act as dashboard
    apptainer instance start  --overlay ${tm_overlay_path}/dashboard_overlay.img ${fedn_build_path}/fedn.sif dashboard
    apptainer exec --pwd /app --overlay ${tm_overlay_path}/dashboard_overlay.img instance://dashboard fedn run dashboard -n reducer --init=/app/config/settings-reducer.yaml &
    
    # Deploy the api server
    apptainer instance start  --overlay ${tm_overlay_path}/api_overlay.img ${fedn_build_path}/fedn.sif api-server
    apptainer exec --pwd /app --overlay ${tm_overlay_path}/api_overlay.img instance://api-server python fedn/fedn/network/api/server.py &
    
    # Deploy a combiner for model aggregations
    apptainer instance start  --overlay ${tm_overlay_path}/combiner_overlay.img ${fedn_build_path}/fedn.sif combiner
    apptainer exec --pwd /app --overlay ${tm_overlay_path}/combiner_overlay.img instance://combiner fedn run combiner --init=/app/config/settings-combiner.yaml &
}

# Deploy bunch of clients TODO: figure out logic for deployment


#############################################################################################################################
##  Deployment logic
#############################################################################################################################

if [ "${run_experiments}" = true ]; then
    #--------------------------------------------
    # Run experiments
    #--------------------------------------------

    # Build containers if requested
    if [ "${build_containers}" = true ]; then
        create_containers
    fi

    for f in ${exps_configs}
    do  
        echo "Running experiment with ${f} config file."
        
        # Clean up if fresh deployment requested
        if [ "${clean_deploy}" = true ]; then
            clean_depoly_paths
            create_overlays
        fi

        # Create directory to temporarily hold compute package
        if test -d ${temp_compute}; then
            rm -rf ${temp_compute}
        fi
        mkdir -p "${temp_compute}"
        
        # Prepare the compute package at temp location
        cp -r "${comp_pack_path}" "${temp_compute}/client"
        cp "${f}" "${temp_compute}/client/config.yaml"

        # Fetch and split data
        apptainer exec ${fedn_build_path}/fedn.sif python "src/compute_pytorch/data_helpers.py" split_data --out_dir="$data_split_path" --config_file="${temp_compute}/client/config.yaml"

        # Prepare compute package
        tar -C "${temp_compute}/" -czvf ${comp_out_path} --exclude "__pycache__" client

        # Get initial / seed model
        apptainer exec ${fedn_build_path}/fedn.sif python "${temp_compute}/client/entrypoint" init_seed --out_path="${seed_path}" --config_file="${temp_compute}/client/config.yaml"

        # Deploy FEDn network
        deploy_fedn_network

        # Submit the compute package and seed model
        apptainer exec ${fedn_build_path}/fedn.sif python ${fedn_apiclient} submit --package="${comp_out_path}" --init_model="${seed_path}"

        # Initiate client containers and map data splits
        n_clients=$(awk '/N_DATA_SPLIT/ {print $2}' "${temp_compute}/client/config.yaml")
        
        for (( client_id=1; client_id<=${n_clients}; client_id++ ))
        do
            echo "Running ${client_id}"
            # Create fresh overlay for this client
            apptainer overlay create --sparse --size 1024 "${tm_overlay_path}/client_${client_id}_overlay.img"
            # Start the FEDn container instance
            apptainer instance start --overlay "${tm_overlay_path}/client_${client_id}_overlay.img" --bind "$data_split_path/splits/$client_id":/var/data ${fedn_build_path}/fedn.sif "client_$client_id"
            # Run the client process
            apptainer exec --pwd /app --overlay "${tm_overlay_path}/client_${client_id}_overlay.img" instance://"client_$client_id" fedn run client --init=/app/config/settings-client.yaml &
            sleep 5
        done

        # Let all clients fire up, wait 30 sec before submitting train request
        sleep 30

        # Initiate training process
        apptainer exec ${fedn_build_path}/fedn.sif python ${fedn_apiclient} train --config_file="${temp_compute}/client/config.yaml"

        # Collect results
        # TODO: Add mechanism to collect train results

    done

else
    #--------------------------------------------
    # Other operations requested
    #--------------------------------------------

    # Build containers if requested
    if [ "$build_containers" = true ]; then
        create_containers
    fi

    # Deploy containers if requested
    if [ "$deploy_containers" = true ]; then
        # Clean up if fresh deployment requested
        if [ "$clean_deploy" = true ]; then
            clean_depoly_paths
            create_overlays
        fi
        # Deploy core FEDn network        
        deploy_fedn_network

        # Deploy some clients
        # apptainer instance start  --overlay ${tm_overlay_path}/client_overlay.img --bind $client_data_path:/var/data ${fedn_build_path}/fedn.sif client
        # apptainer exec --pwd /app --overlay ${tm_overlay_path}/client_overlay.img instance://client fedn run client --init=/app/config/settings-client.yaml &
        # apptainer exec --pwd /app --overlay ${tm_overlay_path}/client_overlay.img --bind $client_data_path:/var/data instance://client fedn run client --init=/app/config/settings-client.yaml &
    fi
fi

if [ "${finish_deployment}" = true ]; then
    apptainer instance stop --all
fi
